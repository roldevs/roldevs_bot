'use strict';

const R = require('ramda');
const AOOracleValues = require('./values');

const roll =(dice, sides) => dice.roll({dices: 1, sides})[0];

AOOracleValues
const AORollCommand = ({cmd, diceValues}) => ({dice}) => {
  const pick = () => {
    const rollValue = roll(dice, diceValues);
    return [
      _pickFormat(
          cmd,
          R.nth(rollValue - 1, AOOracleValues[cmd]),
          rollValue),
    ];
  };

  return {
    cmd,
    pick,
  };
};

const AOQuestionCommand = ({cmd, minValue}) => ({dice}) => {
  const _isYes = (rollValue) => rollValue >= minValue;

  const _pickValue = (yesKey, noKey) => {
    const rollAnswerValue = roll(dice, 6);
    return _pickFormat(
        cmd,
        _isYes(rollAnswerValue) ? yesKey : noKey,
        rollAnswerValue,
    );
  };

  const pick = () => {
    const rollQualifyValue = roll(dice, 6);

    if (rollQualifyValue !== 1 && rollQualifyValue !== 6) {
      return [_pickValue('yes', 'no')];
    }
    if (rollQualifyValue === 1) {
      return [_pickValue('yes_but', 'no_but')];
    }
    if (rollQualifyValue === 6) {
      return [_pickValue('yes_and', 'no_and')];
    }
  };

  return {
    cmd,
    pick,
  };
};

const AOQuestionLikelyCommand = AOQuestionCommand({cmd: 'ql', minValue: 3});
const AOQuestionNormalCommand = AOQuestionCommand({cmd: 'qn', minValue: 4});
const AOQuestionUnlikelyCommand = AOQuestionCommand({cmd: 'qu', minValue: 5});
const AOSceneComplicationCommand = AOBaseCommand({cmd: 'sc', diceValues: 6});
const AOPacingMoveCommand = AOBaseCommand({cmd: 'pm', diceValues: 6});
const AOSoftMoveCommand = AOBaseCommand({cmd: 'sm', diceValues: 6});
const AOHardMoveCommand = AOBaseCommand({cmd: 'hm', diceValues: 6});
const AONPCMoveCommand = AOBaseCommand({cmd: 'nm', diceValues: 6});
const AOActionQuestionCommand = AOBaseCommand({cmd: 'aq', diceValues: 40});
const AODescriptionQuestionCommand = AOBaseCommand({cmd: 'dq', diceValues: 40});
const AOEventFocusCommand = AOBaseCommand({cmd: 'ef', diceValues: 40});

// NPC
const AOSocialPositionCommand = AOBaseCommand({cmd: 'sp', diceValues: 6});
const AOAttitudeCommand = AOBaseCommand({cmd: 'nf', diceValues: 6});
const AOAttitudeCommand = AOBaseCommand({cmd: 'at', diceValues: 6});
const AOConversationFocusCommand = AOBaseCommand({cmd: 'cf', diceValues: 40});

// PLOT
const AOObjetiveCommand = AOBaseCommand({cmd: 'ob', diceValues: 6});
const AOPlotFocusCommand = AOBaseCommand({cmd: 'pf', diceValues: 40});
const AOAdversariesCommand = AOBaseCommand({cmd: 'ad', diceValues: 6});
const AORewardsCommand = AOBaseCommand({cmd: 'rw', diceValues: 6});

const AOClassesCommand = ({cmd, classes}) => (options) => {
  const _pickFromClass = (klass) => klass(options).pick();
  const _pickFromClasses = () => {
    return R.compose(R.flatten, R.map(_pickFromClass))(classes);
  };

  const pick = () => _pickFromClasses();

  return {
    cmd,
    pick,
  };
};

const AORandomEventCommand = AOClassesCommand({
  cmd: 're',
  classes: [AOEventFocusCommand, AOActionQuestionCommand],
});

const AOSceneAlterationCommand = (options) => {
  const cmd = 'sa';
  const _pickSceneComplication = AOSceneComplicationCommand(options).pick;
  const _pickRandomEvent = AORandomEventCommand(options).pick;
  const _pickPacingMove = AOPacingMoveCommand(options).pick;

  const pick = () => {
    const rollValue = roll(options.dice, 6);
    let result = [
      _pickFormat(cmd, R.nth(rollValue - 1, AOOracleValues.sa), rollValue),
    ];
    if (rollValue === 4) {
      result = R.concat(result, _pickSceneComplication());
    }
    if (rollValue === 5) {
      result = R.concat(result, _pickRandomEvent());
    }
    if (rollValue === 6) {
      result = R.concat(result, _pickPacingMove());
    }
    return result;
  };

  return {
    cmd,
    pick,
  };
};

const AONPCCommand = AOClassesCommand({
  cmd: 'npc',
  classes: [
    AOSocialPositionCommand,
    AONotableFeaturesCommand,
    AOAttitudeCommand,
    AOConversationFocusCommand,
  ],
});

const AOPlotCommand = AOClassesCommand({
  cmd: 'plot',
  classes: [
    AOObjetiveCommand,
    AOPlotFocusCommand,
    AOAdversariesCommand,
    AORewardsCommand,
  ],
});

module.exports = {
  AOQuestionLikelyCommand,
  AOQuestionNormalCommand,
  AOQuestionUnlikelyCommand,
  AOSceneComplicationCommand,
  AOPacingMoveCommand,
  AOSoftMoveCommand,
  AOHardMoveCommand,
  AONPCMoveCommand,
  AOActionQuestionCommand,
  AODescriptionQuestionCommand,
  AOEventFocusCommand,
  AORandomEventCommand,
  AOSceneAlterationCommand,
  AOSocialPositionCommand,
  AONotableFeaturesCommand,
  AOAttitudeCommand,
  AOConversationFocusCommand,
  AOObjetiveCommand,
  AOPlotFocusCommand,
  AOAdversariesCommand,
  AORewardsCommand,
  AONPCCommand,
  AOPlotCommand,
};
